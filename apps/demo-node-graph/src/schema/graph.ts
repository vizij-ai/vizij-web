import { z } from "zod";

export const NodeType = z.enum([
  "constant",
  "slider",
  "multislider",
  "add",
  "subtract",
  "multiply",
  "divide",
  "power",
  "log",
  "sin",
  "cos",
  "tan",
  "time",
  "oscillator",
  "spring",
  "damp",
  "slew",
  "and",
  "or",
  "not",
  "xor",
  "greaterthan",
  "lessthan",
  "equal",
  "notequal",
  "if",
  "clamp",
  "remap",
  "vec3cross",
  "vectorconstant",
  "vectoradd",
  "vectorsubtract",
  "vectormultiply",
  "vectorscale",
  "vectornormalize",
  "vectordot",
  "vectorlength",
  "vectorindex",
  "join",
  "split",
  "vectormin",
  "vectormax",
  "vectormean",
  "vectormedian",
  "vectormode",
  "inversekinematics",
  "urdfikposition",
  "urdfikpose",
  "output",
]);

export const NodeParams = z.object({
  value: z.unknown().optional(),
  frequency: z.number().optional(),
  phase: z.number().optional(),
  min: z.number().optional(),
  max: z.number().optional(),
  in_min: z.number().optional(),
  in_max: z.number().optional(),
  out_min: z.number().optional(),
  out_max: z.number().optional(),
  x: z.number().optional(),
  y: z.number().optional(),
  z: z.number().optional(),
  sizes: z.array(z.number()).optional(),
  bone1: z.number().optional(),
  bone2: z.number().optional(),
  bone3: z.number().optional(),
  urdf_xml: z.string().optional(),
  root_link: z.string().optional(),
  tip_link: z.string().optional(),
  seed: z.array(z.number()).optional(),
  weights: z.array(z.number()).optional(),
  max_iters: z.number().optional(),
  tol_pos: z.number().optional(),
  tol_rot: z.number().optional(),
  index: z.number().optional(),
  stiffness: z.number().optional(),
  damping: z.number().optional(),
  mass: z.number().optional(),
  half_life: z.number().optional(),
  max_rate: z.number().optional(),
  path: z.string().optional(),
});

export const NodeSpec = z.object({
  id: z.string(),
  type: NodeType,
  params: NodeParams.default({}),
  inputs: z
    .record(
      z.object({
        node_id: z.string(),
        output_key: z.string().optional(),
      }),
    )
    .default({}),
  output_shapes: z.record(z.unknown()).default({}),
});

export const GraphSpec = z.object({ nodes: z.array(NodeSpec) });
export type GraphSpec = z.infer<typeof GraphSpec>;
