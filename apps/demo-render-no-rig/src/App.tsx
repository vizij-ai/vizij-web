import { useEffect, useMemo, useState } from "react";

import { ActiveValuesPanel } from "./components/ActiveValuesPanel";
import { AnimatableInspector } from "./components/AnimatableInspector";
import { ControlsToolbar } from "./components/ControlsToolbar";
import { FaceViewer } from "./components/FaceViewer";
import {
  OrchestratorPanel,
  type OrchestratorAnimatableOption,
} from "./components/OrchestratorPanel";
import { FACES, DEFAULT_FACE_ID, getFaceById } from "./data/faces";
import { useFaceLoader } from "./hooks/useFaceLoader";
import { useAnimatableList } from "./hooks/useAnimatableList";

export default function App() {
  const [selectedFaceId, setSelectedFaceId] = useState(DEFAULT_FACE_ID);
  const [namespace, setNamespace] = useState("default");
  const [showSafeArea, setShowSafeArea] = useState(false);
  const [selectedAnimId, setSelectedAnimId] = useState<string | null>(null);

  const face = useMemo(
    () => getFaceById(selectedFaceId) ?? FACES[0],
    [selectedFaceId],
  );
  const loader = useFaceLoader(face, namespace);
  const animatableList = useAnimatableList(namespace, "");

  const animatableOptions = useMemo<OrchestratorAnimatableOption[]>(
    () =>
      animatableList.groups.flatMap((group) =>
        group.items.map((item) => ({
          id: item.id,
          name: item.name,
          group: group.label,
          label: item.label,
          type: item.type,
          defaultValue: item.defaultValue,
        })),
      ),
    [animatableList.groups],
  );

  useEffect(() => {
    if (animatableOptions.length === 0) {
      setSelectedAnimId(null);
      return;
    }
    if (
      !selectedAnimId ||
      !animatableOptions.some((opt) => opt.id === selectedAnimId)
    ) {
      setSelectedAnimId(animatableOptions[0].id);
    }
  }, [animatableOptions, selectedAnimId]);

  return (
    <div className="app-shell">
      <header className="app-header">
        <div className="header-text">
          <h1>Vizij Renderer — No-Rig Demo</h1>
          <p>
            Choose a face, inspect the animatables generated by the Vizij render
            pipeline, and adjust values directly without a rig layer. This view
            lays the groundwork for orchestrator-driven control.
          </p>
        </div>
      </header>

      <ControlsToolbar
        faces={FACES}
        selectedFaceId={selectedFaceId}
        onSelectFace={setSelectedFaceId}
        namespace={namespace}
        onNamespaceChange={setNamespace}
        showSafeArea={showSafeArea}
        onToggleSafeArea={setShowSafeArea}
      />

      <main className="app-main">
        <FaceViewer
          rootId={loader.rootId}
          ready={loader.ready}
          loading={loader.loading}
          error={loader.error}
          namespace={namespace}
          showSafeArea={showSafeArea}
        />
        <AnimatableInspector namespace={namespace} />
      </main>

      <section className="diagnostics">
        <div className="panel">
          <div className="panel-header">
            <h2>Status</h2>
          </div>
          <div className="panel-body status-grid">
            <div>
              <span className="label">Face</span>
              <span>{face?.name ?? "Unknown"}</span>
            </div>
            <div>
              <span className="label">Loader</span>
              <span>
                {loader.loading
                  ? "Loading"
                  : loader.ready
                    ? "Ready"
                    : loader.error
                      ? "Error"
                      : "Idle"}
              </span>
            </div>
            <div>
              <span className="label">Root ID</span>
              <span>{loader.rootId ?? "–"}</span>
            </div>
            <div>
              <span className="label">Error</span>
              <span>{loader.error ?? "–"}</span>
            </div>
          </div>
        </div>
        <ActiveValuesPanel namespace={namespace} />
      </section>

      <OrchestratorPanel
        namespace={namespace}
        animatables={animatableOptions}
        selectedAnimId={selectedAnimId}
        onSelectAnim={setSelectedAnimId}
      />
    </div>
  );
}
